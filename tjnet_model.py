# -*- coding: utf-8 -*-
"""tjnet_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18OMxML2I2nSKR-J8Zifw8IXiemsNM_mw
"""

import numpy as np
import tensorflow as tf
from tensorflow import keras

import torch

from keras.models import load_model
model = load_model('/content/drive/MyDrive/tjnet_model.h5')

bones = np.load('/content/drive/MyDrive/xdata.npy',allow_pickle=True)
age = np.load('/content/drive/MyDrive/ydata.npy',allow_pickle=True)

#separable 합성곱 함수
def separable_conv(x,inchannel,outchannel):
  x = keras.layers.Conv2D(inchannel,(3,3),strides=1,padding="same")(x)
  x = keras.layers.BatchNormalization()(x)
  x = keras.layers.Conv2D(outchannel,(1,1),strides=1,padding="same")(x)
  x = keras.layers.BatchNormalization()(x)
  return x

#model middle_flow 함수
def middle_flow(input_x):
  #encoder
  x = keras.layers.MaxPool2D((2,2),padding="same")(input_x)
  x = resiual_units(x)
  x = keras.layers.MaxPool2D((2,2),padding="same")(x)
  x = resiual_units(x)
  x = keras.layers.MaxPool2D((2,2),padding="same")(x)
  x = resiual_units(x)
  
  

  #decoder
  x = resiual_units(x)
  x = keras.layers.UpSampling2D((2,2),interpolation='bilinear')(x)
  x = resiual_units(x)
  x = keras.layers.UpSampling2D((2,2),interpolation='bilinear')(x)
  x = resiual_units(x)
  x = keras.layers.UpSampling2D((2,2),interpolation='bilinear')(x)
  
  x = separable_conv(x,x.shape[-1],512)
  x = separable_conv(x,x.shape[-1],512) 
  
  #sigmoid 
  x = keras.activations.sigmoid(x)
  x = keras.layers.Multiply()([input_x,x])
  x = keras.layers.Add()([input_x,x])

  x = resiual_units(x)

  return x

#resiual_units 함수 
def resiual_units(input_x):
  x = keras.layers.ReLU()(input_x)
  x = separable_conv(x,x.shape[-1],128)
  x = keras.layers.BatchNormalization()(x)

  x = keras.layers.ReLU()(x)
  x = separable_conv(x,x.shape[-1],256)
  x = keras.layers.BatchNormalization()(x)

  x = keras.layers.ReLU()(x)
  x = separable_conv(x,x.shape[-1],512)
  x = keras.layers.BatchNormalization()(x)
  
  input_x = keras.layers.Add()([x,input_x])

  return input_x

#골연령 측정 모델
#entry flow model
input = keras.Input(shape=(256,256,5))
x = keras.layers.Conv2D(32,(3,3),strides=2)(input)
x = keras.layers.BatchNormalization()(x)
x = keras.layers.ReLU()(x)

x = keras.layers.Conv2D(64,(3,3),strides=1)(x)
x = keras.layers.BatchNormalization()(x)
x = keras.layers.ReLU()(x)
#첫번째
x1 = keras.layers.Conv2D(128,(1,1),strides=2)(x) 
x1 = keras.layers.BatchNormalization()(x1)

x = separable_conv(x,x.shape[-1],128)
x = keras.layers.ReLU()(x)

x = separable_conv(x,x.shape[-1],128)
x = keras.layers.ReLU()(x)
x = keras.layers.MaxPool2D((2,2),2,padding="same")(x)

x = keras.layers.Add()([x,x1])
#2번째
x1 = keras.layers.Conv2D(512,(1,1),strides=2)(x)
x1 = keras.layers.BatchNormalization()(x1)

x = separable_conv(x,x.shape[-1],512)
x = keras.layers.ReLU()(x)

x = separable_conv(x,x.shape[-1],512)
x = keras.layers.ReLU()(x)
x = keras.layers.MaxPool2D((2,2),2,padding="same")(x)

x = keras.layers.Add()([x,x1])


#middle flow model
x = middle_flow(x)


#exit flow model
x1 = keras.layers.Conv2D(1024,(1,1),strides=2)(x)

x = keras.layers.ReLU()(x)
x = separable_conv(x,x.shape[-1],728)
x = keras.layers.ReLU()(x)
x = separable_conv(x,x.shape[-1],1024)
x = keras.layers.MaxPool2D((2,2),2,padding="same")(x)

x = keras.layers.Add()([x,x1])


x = separable_conv(x,x.shape[-1],1536)
x = keras.layers.ReLU()(x)
x = separable_conv(x,x.shape[-1],2048)
x = keras.layers.ReLU()(x)

x = keras.layers.GlobalAvgPool2D()(x)

x = keras.layers.Dense(1000,activation='relu')(x)
x = keras.layers.Dense(256,activation='relu')(x)
x = keras.layers.Dense(1)(x)

model = keras.models.Model(input,x)
model.compile(optimizer='adam',loss='mae',metrics=['mae','mse'])

model.save('./tjnet_model.h5')

from tensorflow.python.keras.utils.vis_utils import model_to_dot
from IPython.display import SVG
import pydot
import graphviz

SVG(model_to_dot(model, show_shapes=True, show_layer_names=True, rankdir='TB',expand_nested=False, dpi=60, subgraph=False).create(prog='dot',format='svg'))

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
import tensorflow as tf
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

from sklearn.model_selection import train_test_split
from keras.callbacks import ModelCheckpoint

bones = np.load('/content/drive/MyDrive/xdata.npy',allow_pickle=True)
age = np.load('/content/drive/MyDrive/ydata.npy',allow_pickle=True)
X_data = bones[:,1]
y = age


filename = 'checkpoint-50-epochs-16-batchs.h5'
checkpoint = ModelCheckpoint(filename,mointor='val_loss',verbose=1,save_best_only=True,mode='auto')

from google.colab import drive
drive.mount('/content/drive')

tmp = np.zeros((256,256))
for _,x in enumerate(X_data):
  if _ == 0:
    tmp = x
    tmp = tmp.reshape(256,256,5)
    print(tmp)
  else:
    tmp = np.concatenate([tmp,x.reshape(256,256,5)])
    
X_data = tmp

np.set_printoptions(formatter={'float_kind': lambda x: "{0:0.1f}".format(x)})
y = y.astype(np.float)

train_x,test_x,train_y,test_y = train_test_split(X_data.reshape(1200,256,256,-1),y,random_state=42,test_size=0.2)
train_x,val_x,train_y,val_y = train_test_split(train_x,train_y,random_state=42,test_size=0.2)

with tf.device('/device:GPU:0'):
  model.fit(train_x,train_y,batch_size=16,epochs=150,callbacks=checkpoint,validation_data=(val_x,val_y))

prediction = model.predict(bones[400,1].reshape(-1,256,256,5))

output = round(prediction[0][0], 1)
print(output)

y[400]

model.summary()

